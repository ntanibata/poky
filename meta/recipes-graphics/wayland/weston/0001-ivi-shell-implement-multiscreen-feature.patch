From f1b8f940a8a008767b85078f95e9107a451b3592 Mon Sep 17 00:00:00 2001
From: Nobuhiko Tanibata <NOBUHIKO_TANIBATA@xddp.denso.co.jp>
Date: Fri, 12 Jun 2015 17:27:25 +0900
Subject: [PATCH 1/2] ivi-shell: implement multiscreen feature

To enalbe multiscreen feature in ivi-shell, following things are taken
account.

- calc_surface_to_global_matrix_and_mask_to_weston_surface
  - shall take care of transforming layer-local coordinates to
    screen-local coordinates.
  - if a part of ivi-surface is located outside of a screen, it shall
    not be displayed because it should not be displayed in another
    screen.

- update_prop
  - if ivi-surface doesn't belong to any screen, shall be skipped.

- commit_screen_list
  - view_list for ivi-layout shall be cleared outside of loop in
    screens. Layer would belong to not only the first screen but also
    other screens.
  - To move a layer from a screen to another screen, layer shall be
    unlinked from a screen the layer belongs before.
  - shall not break to continue processing about multi screens.

- ivi_layout_get_screen_from_id
  - shall implement multi screens

Signed-off-by: Nobuhiko Tanibata <NOBUHIKO_TANIBATA@xddp.denso.co.jp>
---
 ivi-shell/ivi-layout.c | 52 ++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 38 insertions(+), 14 deletions(-)

diff --git a/ivi-shell/ivi-layout.c b/ivi-shell/ivi-layout.c
index 24bd8dd..3f2788a 100644
--- a/ivi-shell/ivi-layout.c
+++ b/ivi-shell/ivi-layout.c
@@ -672,8 +672,8 @@ calc_inverse_matrix_transform(const struct weston_matrix *matrix,
  * ivi_rectangle. This can be set to weston_view_set_mask.
  *
  * The mask is computed by following steps
- * - destination rectangle of layer is inversed to surface-local cooodinates
- *   by inversed matrix:m.
+ * - destination rectangle of layer in global coordinates and interfaced within
+ *   a screen is inversed to surface-local cooodinates by inversed matrix:m.
  * - the area is intersected by intersected area between weston_surface and
  *   source rectangle of ivi_surface.
  */
@@ -686,6 +686,7 @@ calc_surface_to_global_matrix_and_mask_to_weston_surface(
 {
 	const struct ivi_layout_surface_properties *sp = &ivisurf->prop;
 	const struct ivi_layout_layer_properties *lp = &ivilayer->prop;
+	struct weston_output *output = ivisurf->surface->output;
 	struct ivi_rectangle weston_surface_rect = { 0,
 						     0,
 						     ivisurf->surface->width,
@@ -706,14 +707,30 @@ calc_surface_to_global_matrix_and_mask_to_weston_surface(
 						     lp->dest_y,
 						     lp->dest_width,
 						     lp->dest_height };
+	struct ivi_rectangle screen_source_rect =  { 0,
+						     0,
+						     output->width,
+						     output->height };
+	struct ivi_rectangle screen_dest_rect =    { output->x,
+						     output->y,
+						     output->width,
+						     output->height };
+	struct ivi_rectangle layer_dest_rect_in_screen =
+						   { lp->dest_x + output->x,
+						     lp->dest_y + output->y,
+						     lp->dest_width,
+						     lp->dest_height };
+
 	struct ivi_rectangle surface_result;
+	struct ivi_rectangle layer_dest_rect_in_screen_intersected;
 
 	/*
 	 * the whole transformation matrix:m from surface-local
 	 * coordinates to global coordinates, which is computed by
 	 * two steps,
 	 * - surface-local coordinates to layer-local coordinates
-	 * - layer-local coordinates to global coordinates
+	 * - layer-local coordinates to screen-local coordinates
+	 * - screen-local coordinates to global coordinates
 	 */
 	calc_transformation_matrix(&surface_source_rect,
 				   &surface_dest_rect,
@@ -723,15 +740,23 @@ calc_surface_to_global_matrix_and_mask_to_weston_surface(
 				   &layer_dest_rect,
 				   lp->orientation, m);
 
+	calc_transformation_matrix(&screen_source_rect,
+				   &screen_dest_rect,
+				   0, m);
+
 	/* this intersected ivi_rectangle would be used for masking
 	 * weston_surface
 	 */
 	ivi_rectangle_intersect(&surface_source_rect, &weston_surface_rect,
 				&surface_result);
 
+	/* outside of screen shall not be displayed */
+	ivi_rectangle_intersect(&layer_dest_rect_in_screen, &screen_dest_rect,
+				&layer_dest_rect_in_screen_intersected);
+
 	/* calc masking area of weston_surface from m */
 	calc_inverse_matrix_transform(m,
-				      &layer_dest_rect,
+				      &layer_dest_rect_in_screen_intersected,
 				      &surface_result,
 				      result);
 }
@@ -744,9 +769,8 @@ update_prop(struct ivi_layout_layer *ivilayer,
 	struct ivi_rectangle r;
 	bool can_calc = true;
 
-	if (!ivilayer->event_mask && !ivisurf->event_mask) {
+	if ((!ivilayer->event_mask && !ivisurf->event_mask) || ivisurf->surface->output == NULL)
 		return;
-	}
 
 	update_opacity(ivilayer, ivisurf);
 
@@ -960,6 +984,9 @@ commit_screen_list(struct ivi_layout *layout)
 	struct ivi_layout_layer   *next     = NULL;
 	struct ivi_layout_surface *ivisurf  = NULL;
 
+	/* Clear view list of layout ivi_layer */
+	wl_list_init(&layout->layout_layer.view_list.link);
+
 	wl_list_for_each(iviscrn, &layout->screen_list, link) {
 		if (iviscrn->order.dirty) {
 			wl_list_for_each_safe(ivilayer, next,
@@ -974,6 +1001,9 @@ commit_screen_list(struct ivi_layout *layout)
 
 			wl_list_for_each(ivilayer, &iviscrn->pending.layer_list,
 					 pending.link) {
+				wl_list_remove(&ivilayer->order.link);
+				remove_orderlayer_from_screen(ivilayer);
+
 				wl_list_insert(&iviscrn->order.layer_list,
 					       &ivilayer->order.link);
 				add_orderlayer_to_screen(ivilayer, iviscrn);
@@ -983,9 +1013,6 @@ commit_screen_list(struct ivi_layout *layout)
 			iviscrn->order.dirty = 0;
 		}
 
-		/* Clear view list of layout ivi_layer */
-		wl_list_init(&layout->layout_layer.view_list.link);
-
 		wl_list_for_each(ivilayer, &iviscrn->order.layer_list, order.link) {
 			if (ivilayer->prop.visibility == false)
 				continue;
@@ -1009,8 +1036,6 @@ commit_screen_list(struct ivi_layout *layout)
 				ivisurf->surface->output = iviscrn->output;
 			}
 		}
-
-		break;
 	}
 }
 
@@ -1484,9 +1509,8 @@ ivi_layout_get_screen_from_id(uint32_t id_screen)
 	struct ivi_layout_screen *iviscrn = NULL;
 
 	wl_list_for_each(iviscrn, &layout->screen_list, link) {
-/* FIXME : select iviscrn from screen_list by id_screen */
-		return iviscrn;
-		break;
+		if (iviscrn->id_screen == id_screen)
+			return iviscrn;
 	}
 
 	return NULL;
-- 
2.5.1

